
/*CASE 1 ORDER_ANALYSIS
QUESTION 1
Check the order status on a monthly basis. Use order_approved_at for date data*/

SELECT (DATE_TRUNC('month',O.ORDER_APPROVED_AT))::date AS PAYMENT_MONTH,
	COUNT(O.ORDER_ID) AS ORDER_COUNT
FROM PAYMENTS AS P
JOIN ORDERS AS O ON O.ORDER_ID = P.ORDER_ID
WHERE O.ORDER_APPROVED_AT IS NOT NULL
GROUP BY 1
ORDER BY PAYMENT_MONTH



/* CASE 1 ORDER ANALYSIS
QUESTION 2 
Examine the order numbers in the order_ status breakdown on a monthly basis. Visualize the output of the query with Excel.
Are there months where there is a dramatic decline or rise? Examine and interpret the data*/

SELECT DATE_TRUNC('month',O.ORDER_APPROVED_AT) AS PAYMENT_MONTH,
	O.ORDER_STATUS,
	COUNT(P.ORDER_ID) AS ORDER_COUNT
FROM PAYMENTS AS P
LEFT JOIN ORDERS AS O ON O.ORDER_ID = P.ORDER_ID AND O.ORDER_STATUS = 'shipped' --canceled,invoiced,processing,approved
WHERE O.ORDER_APPROVED_AT IS NOT NULL
GROUP BY 1,2
ORDER BY PAYMENT_MONTH,2


/* CASE 1 
QUESTION 3
 Examine the order numbers in the product category breakdown.
 What are the prominent categories on special days? For example, New Year's Eve, Valentine's Day...*/ 

/* AVG DELIVERY TIME

SELECT 
AVG(O.ORDER_DELIVERED_CUSTOMER_DATE - O.ORDER_PURCHASE_TIMESTAMP) AS AVG_DELIVERY_TIME
FROM ORDERS O
*/

-- Product Category Breakdown
SELECT DISTINCT P.PRODUCT_CATEGORY_NAME,
	T.CATEGORY_NAME_ENGLISH,
	COUNT(DISTINCT O.ORDER_ID) AS ORDER_COUNT
FROM ORDERS O
LEFT JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
LEFT JOIN PRODUCTS P ON OI.PRODUCT_ID = P.PRODUCT_ID
LEFT JOIN TRANSLATION T ON T.CATEGORY_NAME = P.PRODUCT_CATEGORY_NAME
LEFT JOIN PAYMENTS PY ON O.ORDER_ID = PY.ORDER_ID
WHERE P.PRODUCT_CATEGORY_NAME IS NOT NULL
GROUP BY 1,2
ORDER BY ORDER_COUNT DESC






-- SPECIAL DAYS
-- 24 Nov 2017 Black Friday
SELECT 
	DISTINCT P.PRODUCT_CATEGORY_NAME,
	T.CATEGORY_NAME_ENGLISH,
	COUNT(DISTINCT O.ORDER_ID) AS ORDER_COUNT
FROM ORDERS O
LEFT JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
LEFT JOIN PRODUCTS P ON OI.PRODUCT_ID = P.PRODUCT_ID
LEFT JOIN TRANSLATION T ON T.CATEGORY_NAME = P.PRODUCT_CATEGORY_NAME
LEFT JOIN PAYMENTS PY ON O.ORDER_ID = PY.ORDER_ID
WHERE O.ORDER_PURCHASE_TIMESTAMP::date  = '2017-11-24'
GROUP BY 1,2
ORDER BY ORDER_COUNT DESC
 
 -- 14 FEB VALENTINES DAY(BOTH 2017 AND 2018)
SELECT DISTINCT P.PRODUCT_CATEGORY_NAME,
	   T.CATEGORY_NAME_ENGLISH,
	   COUNT(DISTINCT O.ORDER_ID) AS ORDER_COUNT
FROM ORDERS O
LEFT JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
LEFT JOIN PRODUCTS P ON OI.PRODUCT_ID = P.PRODUCT_ID
LEFT JOIN TRANSLATION T ON T.CATEGORY_NAME = P.PRODUCT_CATEGORY_NAME
LEFT JOIN PAYMENTS PY ON O.ORDER_ID = PY.ORDER_ID
WHERE O.ORDER_DELIVERED_CUSTOMER_DATE BETWEEN '2017-02-07' AND '2017-02-14'
-- Change the dates for 2018 
GROUP BY 1,2
ORDER BY ORDER_COUNT DESC
 
-- 01 JAN 2018
SELECT DISTINCT P.PRODUCT_CATEGORY_NAME,
	   T.CATEGORY_NAME_ENGLISH,
	   COUNT(DISTINCT O.ORDER_ID) AS ORDER_COUNT
FROM ORDERS O
LEFT JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
LEFT JOIN PRODUCTS P ON OI.PRODUCT_ID = P.PRODUCT_ID
LEFT JOIN TRANSLATION T ON T.CATEGORY_NAME = P.PRODUCT_CATEGORY_NAME
LEFT JOIN PAYMENTS PY ON O.ORDER_ID = PY.ORDER_ID
WHERE O.ORDER_DELIVERED_CUSTOMER_DATE BETWEEN '2017-12-25' AND '2018-01-01'
GROUP BY 1,2
ORDER BY ORDER_COUNT DESC

/*CASE 1 
QUESTION 4
Examine the order numbers on the basis of days of the week (Monday, Thursday, ....) and month days (such as the 1st, 2nd of the month).
Create a visual in Excel with the output of the query you wrote and interpret it.*/ 

--DAYS OF WEEK
SELECT DISTINCT (TO_CHAR(ORDER_PURCHASE_TIMESTAMP,'DAY')) AS DAYOFWEEK,
	   COUNT(DISTINCT ORDER_ID) AS ORDER_COUNT
FROM ORDERS
GROUP BY DAYOFWEEK
ORDER BY ORDER_COUNT DESC

-- MONTH DAYS
SELECT EXTRACT(DAY FROM ORDER_PURCHASE_TIMESTAMP) AS DAY_OF_MONTH,
	COUNT(DISTINCT ORDER_ID) AS ORDER_COUNT
FROM ORDERS
GROUP BY DAY_OF_MONTH
ORDER BY DAY_OF_MONTH

 /*
Case 2 : CUSTOMER ANALYSIS
Question 1 : 
-In which cities do customers shop more?
Determine the customer's city as the city from which they place the most orders and perform the analysis accordingly.



For example; Sibel places orders from 3 different cities: 3 from Çanakkale, 8 from Muğla and 10 from Istanbul.
You should select Sibel's city as Istanbul, which is the city she orders the most, and
Sibel's orders should appear as 21 orders from Istanbul.*/

WITH CUSTOMERMAXORDERS AS(
	SELECT C.CUSTOMER_UNIQUE_ID,
		C.CUSTOMER_CITY,
		COUNT(O.ORDER_ID) AS ORDER_COUNT,
		RANK() OVER (PARTITION BY C.CUSTOMER_UNIQUE_ID ORDER BY COUNT(O.ORDER_ID) DESC,O.ORDER_PURCHASE_TIMESTAMP DESC) AS RNK
		FROM CUSTOMERS C
		JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
		GROUP BY C.CUSTOMER_UNIQUE_ID,C.CUSTOMER_CITY,O.ORDER_ID
)
SELECT CUSTOMER_CITY AS MOST_ORDERS_CITY,
	COUNT(ORDER_COUNT) AS ORDER_COUNT
FROM CUSTOMERMAXORDERS
WHERE RNK = 1
GROUP BY 1
ORDER BY ORDER_COUNT DESC


/*
Case 3: SELLER ANALYSIS
Question 1 : 
-Who are the sellers who deliver orders to customers in the fastest way? Bring top 5.
Examine and comment on the order numbers of these sellers and the comments and ratings on their products.
*/

/* All of the fastest sellers in this query have sold only once.So the fastest sellers are the new ones
But with only one order so. It's not a very meaningfull data*/

SELECT S.SELLER_ID,
	AVG(O.ORDER_DELIVERED_CUSTOMER_DATE - O.ORDER_PURCHASE_TIMESTAMP) AS AVG_DELIVERY_TIME,
	COUNT(O.ORDER_ID) AS ORDER_COUNT,
	ROUND(AVG(R.REVIEW_SCORE),2) AS AVG_REVIEW_SCORE,
	COUNT(R.REVIEW_COMMENT_MESSAGE) AS COMMENT_COUNT
FROM SELLERS S
JOIN ORDER_ITEMS OI ON S.SELLER_ID = OI.SELLER_ID
JOIN ORDERS O ON O.ORDER_ID = OI.ORDER_ID
LEFT JOIN REVIEWS R ON O.ORDER_ID = R.ORDER_ID 
WHERE O.ORDER_DELIVERED_CUSTOMER_DATE IS NOT NULL
GROUP BY S.SELLER_ID
ORDER BY AVG_DELIVERY_TIME
LIMIT 5


/* In this query, the top 5 sellers who have sold more than the average number of orders and delivered the fastest
has been brought A bit more meaningful data.*/ 

SELECT S.SELLER_ID,
	AVG(O.ORDER_DELIVERED_CUSTOMER_DATE - O.ORDER_PURCHASE_TIMESTAMP) AS AVG_DELIVERY_TIME,
	COUNT(O.ORDER_ID) AS ORDER_COUNT,
	ROUND(AVG(R.REVIEW_SCORE),
		2) AS AVG_REVIEW_SCORE,
	COUNT(R.REVIEW_COMMENT_MESSAGE) AS COMMENT_COUNT
FROM SELLERS S
JOIN ORDER_ITEMS OI ON S.SELLER_ID = OI.SELLER_ID
JOIN ORDERS O ON O.ORDER_ID = OI.ORDER_ID
LEFT JOIN REVIEWS R ON O.ORDER_ID = R.ORDER_ID
WHERE O.ORDER_DELIVERED_CUSTOMER_DATE IS NOT NULL
GROUP BY S.SELLER_ID
HAVING COUNT(O.ORDER_ID) >
	(SELECT COUNT(DISTINCT O.ORDER_ID) / COUNT(DISTINCT S.SELLER_ID)
		FROM ORDERS O
		JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
		JOIN SELLERS S ON S.SELLER_ID = OI.SELLER_ID)
ORDER BY AVG_DELIVERY_TIME ASC,ORDER_COUNT DESC
LIMIT 5 




/*
Case 3
Question 2 : 
-Which sellers sell products from more categories?
 Do sellers with many categories also have a high number of orders?
*/


SELECT S.SELLER_ID,
	COUNT(DISTINCT P.PRODUCT_CATEGORY_NAME) AS CATEGORY_COUNT,
	COUNT(O.ORDER_ID) AS ORDER_COUNT
FROM SELLERS S
JOIN ORDER_ITEMS OI ON S.SELLER_ID = OI.SELLER_ID
JOIN ORDERS O ON O.ORDER_ID = OI.ORDER_ID
JOIN PRODUCTS P ON P.PRODUCT_ID = OI.PRODUCT_ID
WHERE P.PRODUCT_CATEGORY_NAME IS NOT NULL
GROUP BY S.SELLER_ID
ORDER BY 2 DESC, 3 DESC


/*
Case 4 : Payment Analysis
Question 1 : 
Which region do the users with the highest number of installments live in? Interpret this output.
*/

SELECT DISTINCT C.CUSTOMER_STATE,
	ROUND(AVG(P.PAYMENT_INSTALLMENTS),2) AS AVG_INSTALLMENT
FROM PAYMENTS AS P
JOIN ORDERS O ON O.ORDER_ID = P.ORDER_ID
JOIN CUSTOMERS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE P.PAYMENT_INSTALLMENTS > 1
GROUP BY 1
ORDER BY AVG_INSTALLMENT DESC;

/*
Case 4 
Question 2 : 
Calculate the number of successful orders and total successful payment amount according to payment type.
Rank them in order from the most used payment type to the least. */

select distinct order_status from orders

SELECT P.PAYMENT_TYPE,
	   COUNT(DISTINCT O.ORDER_ID) AS SUCCESFUL_ORDER_COUNT,
	   SUM(P.PAYMENT_VALUE)::integer AS TOTAL_PAYMENT
FROM PAYMENTS P
LEFT JOIN ORDERS O ON P.ORDER_ID = O.ORDER_ID
AND O.ORDER_STATUS = 'delivered'
GROUP BY 1
ORDER BY SUCCESFUL_ORDER_COUNT DESC


/*
Case 4 
Question 3 : 
-Make a category-based analysis of orders paid in one shot and in installments.
In which categories is payment in installments used most?
*/


-- One Shot
SELECT PR.PRODUCT_CATEGORY_NAME,
	T.CATEGORY_NAME_ENGLISH,
	COUNT(DISTINCT O.ORDER_ID) AS ORDER_COUNT
FROM PRODUCTS PR
LEFT JOIN ORDER_ITEMS OI ON PR.PRODUCT_ID = OI.PRODUCT_ID
JOIN ORDERS O ON O.ORDER_ID = OI.ORDER_ID
JOIN PAYMENTS P ON P.ORDER_ID = O.ORDER_ID
AND P.PAYMENT_INSTALLMENTS = 1
JOIN TRANSLATION T ON T.CATEGORY_NAME = PR.PRODUCT_CATEGORY_NAME
GROUP BY 1,2
ORDER BY 3 DESC


-- Installment
SELECT PR.PRODUCT_CATEGORY_NAME,
	T.CATEGORY_NAME_ENGLISH,
	COUNT(DISTINCT O.ORDER_ID) AS ORDER_COUNT
FROM PRODUCTS PR
LEFT JOIN ORDER_ITEMS OI ON PR.PRODUCT_ID = OI.PRODUCT_ID
JOIN ORDERS O ON O.ORDER_ID = OI.ORDER_ID
JOIN PAYMENTS P ON P.ORDER_ID = O.ORDER_ID
AND P.PAYMENT_INSTALLMENTS > 1
JOIN TRANSLATION T ON T.CATEGORY_NAME = PR.PRODUCT_CATEGORY_NAME
GROUP BY 1,2
ORDER BY 3 DESC

/*
Case 5 : RFM AnaCALL
Perform RFM analysis using the data set in the e_commerce_data_.csv file.
When calculating recency, take the last order date as basis, not today's date. 
*/

WITH RFM AS 
(
WITH MAX_INVOICE_DATE AS (
SELECT 
	CUSTOMERID,
	MAX(INVOICEDATE::date) AS LAST_INVOICE_DATE
FROM ECOMMERCE_DATA AS ECD
WHERE INVOICENO NOT LIKE 'C%'
GROUP BY 1
)
SELECT CUSTOMERID,
	((SELECT MAX(INVOICEDATE::date) FROM ECOMMERCE_DATA) - LAST_INVOICE_DATE::date) AS RECENCY
FROM MAX_INVOICE_DATE ), FREQUENCY AS
(
SELECT CUSTOMERID,
	COUNT(DISTINCT INVOICENO) AS FREQUENCY
FROM ECOMMERCE_DATA
WHERE INVOICENO NOT LIKE 'C%'
GROUP BY 1
),MONETARY AS (
SELECT CUSTOMERID,
	SUM(QUANTITY * UNITPRICE) AS MONETARY
FROM ECOMMERCE_DATA
WHERE INVOICENO NOT LIKE 'C%'
GROUP BY 1
)
SELECT 
	 R.CUSTOMERID,
	 R.RECENCY,
	 F.FREQUENCY,
	 M.MONETARY,
	 NTILE(5) OVER (ORDER BY RECENCY DESC) AS RECENCY_SCORE, 
	 NTILE(5) OVER (ORDER BY FREQUENCY) AS FREQUENCY_SCORE,
	 NTILE(5) OVER (ORDER BY MONETARY) AS MONETARY_SCORE,
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) AS RFM_SCORE,
	 CASE
	 WHEN
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '11' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '12' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '21' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '22' 
	 THEN 'HIBERNATING'
	 WHEN
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '13' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '14' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '23' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '24' 
	 THEN 'AT RISK'
	  WHEN
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '15' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '25'
	 THEN 'CANT LOOSE'
	 WHEN
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '31' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '32' 
	 THEN 'ABOUT TO SLEEP'
	 WHEN CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '33'
	 THEN 'NEED ATTENTION'
	 WHEN
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '34' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '35' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '44' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '45' 
	 THEN 'LOYAL CUSTOMERS'
	 WHEN
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '41'
	 THEN 'PROMISING'
	 WHEN
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '42' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '43' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '52' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '53' 
	 THEN 'POTENTIAL LOYALISTS'
	 WHEN
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '51'
	 THEN 'NEW CUSTOMERS'
	 WHEN
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '54' OR
	 CONCAT((NTILE(5) OVER (ORDER BY RECENCY DESC)),(NTILE(5) OVER (ORDER BY FREQUENCY))) = '55' 
	 THEN 'CHAMPIONS'
	 END AS RFM_CATEGORY

FROM RFM AS R
INNER JOIN FREQUENCY F ON R.CUSTOMERID = F.CUSTOMERID
INNER JOIN MONETARY M ON R.CUSTOMERID = M.CUSTOMERID
ORDER BY F.FREQUENCY DESC




